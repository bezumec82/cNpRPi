// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: schema.capnp

#include "schema.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<37> b_a3ea3119d43b7491 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    145, 116,  59, 212,  25,  49, 234, 163,
     82,   0,   0,   0,   3,   0,   0,   0,
     58, 211, 145, 149, 161, 183, 250, 224,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   2,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  71,   0,   0,   0,
    101,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 100, 105,  97,  47,  99, 111,
    110, 115, 116,  97, 110, 116, 105, 110,
    101,  47,  87, 111, 114, 107,  47,  66,
     79,  65,  82,  68,  83,  47,  82,  65,
     83,  80,  66,  69,  82,  82,  89,  47,
    119, 111, 114, 107, 115, 112,  97,  99,
    101,  47,  67,  97, 112,  78,  80, 114,
    111, 116, 111,  47, 114, 101, 115, 111,
    117, 114,  99, 101,  47, 115,  99, 104,
    101, 109,  97,  46,  99,  97, 112, 110,
    112,  58,  67,  97, 108, 108,  97,  98,
    108, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21, 131,  22,  20, 226, 146,  52, 144,
    201,  80, 206, 233, 216,   1, 247, 172,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    112, 114, 105, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_a3ea3119d43b7491 = b_a3ea3119d43b7491.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a3ea3119d43b7491[] = {
  &s_903492e214168315,
  &s_acf701d8e9ce50c9,
};
static const uint16_t m_a3ea3119d43b7491[] = {0};
const ::capnp::_::RawSchema s_a3ea3119d43b7491 = {
  0xa3ea3119d43b7491, b_a3ea3119d43b7491.words, 37, d_a3ea3119d43b7491, m_a3ea3119d43b7491,
  2, 1, nullptr, nullptr, nullptr, { &s_a3ea3119d43b7491, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<25> b_903492e214168315 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21, 131,  22,  20, 226, 146,  52, 144,
     91,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   3,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 100, 105,  97,  47,  99, 111,
    110, 115, 116,  97, 110, 116, 105, 110,
    101,  47,  87, 111, 114, 107,  47,  66,
     79,  65,  82,  68,  83,  47,  82,  65,
     83,  80,  66,  69,  82,  82,  89,  47,
    119, 111, 114, 107, 115, 112,  97,  99,
    101,  47,  67,  97, 112,  78,  80, 114,
    111, 116, 111,  47, 114, 101, 115, 111,
    117, 114,  99, 101,  47, 115,  99, 104,
    101, 109,  97,  46,  99,  97, 112, 110,
    112,  58,  67,  97, 108, 108,  97,  98,
    108, 101,  46, 112, 114, 105, 110, 116,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_903492e214168315 = b_903492e214168315.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_903492e214168315 = {
  0x903492e214168315, b_903492e214168315.words, 25, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_903492e214168315, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<26> b_acf701d8e9ce50c9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201,  80, 206, 233, 216,   1, 247, 172,
     91,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   3,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 100, 105,  97,  47,  99, 111,
    110, 115, 116,  97, 110, 116, 105, 110,
    101,  47,  87, 111, 114, 107,  47,  66,
     79,  65,  82,  68,  83,  47,  82,  65,
     83,  80,  66,  69,  82,  82,  89,  47,
    119, 111, 114, 107, 115, 112,  97,  99,
    101,  47,  67,  97, 112,  78,  80, 114,
    111, 116, 111,  47, 114, 101, 115, 111,
    117, 114,  99, 101,  47, 115,  99, 104,
    101, 109,  97,  46,  99,  97, 112, 110,
    112,  58,  67,  97, 108, 108,  97,  98,
    108, 101,  46, 112, 114, 105, 110, 116,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_acf701d8e9ce50c9 = b_acf701d8e9ce50c9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_acf701d8e9ce50c9 = {
  0xacf701d8e9ce50c9, b_acf701d8e9ce50c9.words, 26, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_acf701d8e9ce50c9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Callable::PrintParams,  ::Callable::PrintResults>
Callable::Client::printRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Callable::PrintParams,  ::Callable::PrintResults>(
      0xa3ea3119d43b7491ull, 0, sizeHint);
}
::kj::Promise<void> Callable::Server::print(PrintContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "media/constantine/Work/BOARDS/RASPBERRY/workspace/CapNProto/resource/schema.capnp:Callable", "print",
      0xa3ea3119d43b7491ull, 0);
}
::kj::Promise<void> Callable::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa3ea3119d43b7491ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("media/constantine/Work/BOARDS/RASPBERRY/workspace/CapNProto/resource/schema.capnp:Callable", interfaceId);
  }
}
::kj::Promise<void> Callable::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return print(::capnp::Capability::Server::internalGetTypedContext<
           ::Callable::PrintParams,  ::Callable::PrintResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "media/constantine/Work/BOARDS/RASPBERRY/workspace/CapNProto/resource/schema.capnp:Callable",
          0xa3ea3119d43b7491ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Callable
#if !CAPNP_LITE
constexpr ::capnp::Kind Callable::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Callable::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Callable::PrintParams
constexpr uint16_t Callable::PrintParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Callable::PrintParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Callable::PrintParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Callable::PrintParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Callable::PrintResults
constexpr uint16_t Callable::PrintResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Callable::PrintResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Callable::PrintResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Callable::PrintResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



