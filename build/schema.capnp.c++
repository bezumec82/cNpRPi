// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: schema.capnp

#include "schema.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<28> b_d99051492ab6b306 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6, 179, 182,  42,  73,  81, 144, 217,
     13,   0,   0,   0,   3,   0,   0,   0,
     86, 199,  78, 106,  79, 233, 166, 203,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 109,  97,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 108,
    108,  97,  98, 108, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33, 215, 246,   6, 212,  62,  87, 144,
    104,  48,  66, 105, 253,  98,  33, 132,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    112, 114, 105, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d99051492ab6b306 = b_d99051492ab6b306.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d99051492ab6b306[] = {
  &s_842162fd69423068,
  &s_90573ed406f6d721,
};
static const uint16_t m_d99051492ab6b306[] = {0};
const ::capnp::_::RawSchema s_d99051492ab6b306 = {
  0xd99051492ab6b306, b_d99051492ab6b306.words, 28, d_d99051492ab6b306, m_d99051492ab6b306,
  2, 1, nullptr, nullptr, nullptr, { &s_d99051492ab6b306, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_90573ed406f6d721 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33, 215, 246,   6, 212,  62,  87, 144,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 109,  97,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 108,
    108,  97,  98, 108, 101,  46, 112, 114,
    105, 110, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_90573ed406f6d721 = b_90573ed406f6d721.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_90573ed406f6d721 = {
  0x90573ed406f6d721, b_90573ed406f6d721.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_90573ed406f6d721, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_842162fd69423068 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    104,  48,  66, 105, 253,  98,  33, 132,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115,  99, 104, 101, 109,  97,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 108,
    108,  97,  98, 108, 101,  46, 112, 114,
    105, 110, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_842162fd69423068 = b_842162fd69423068.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_842162fd69423068 = {
  0x842162fd69423068, b_842162fd69423068.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_842162fd69423068, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Callable::PrintParams,  ::Callable::PrintResults>
Callable::Client::printRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Callable::PrintParams,  ::Callable::PrintResults>(
      0xd99051492ab6b306ull, 0, sizeHint);
}
::kj::Promise<void> Callable::Server::print(PrintContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "schema.capnp:Callable", "print",
      0xd99051492ab6b306ull, 0);
}
::kj::Promise<void> Callable::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd99051492ab6b306ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("schema.capnp:Callable", interfaceId);
  }
}
::kj::Promise<void> Callable::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return print(::capnp::Capability::Server::internalGetTypedContext<
           ::Callable::PrintParams,  ::Callable::PrintResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "schema.capnp:Callable",
          0xd99051492ab6b306ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Callable
#if !CAPNP_LITE
constexpr ::capnp::Kind Callable::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Callable::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Callable::PrintParams
constexpr uint16_t Callable::PrintParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Callable::PrintParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Callable::PrintParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Callable::PrintParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Callable::PrintResults
constexpr uint16_t Callable::PrintResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Callable::PrintResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Callable::PrintResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Callable::PrintResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



